#!/bin/bash

set -eo pipefail
# set -x

export ROOT=${ROOT:="/home/core/actn"}
export FLEET_DIR=${FLEET_DIR:="$ROOT/fleet"}
export TMPL_DIR=${TMPL_DIR:="$ROOT/fleet/templates"}
export DOCKER_DIR=${DOCKER_DIR:="$ROOT/docker"}

declare -a APIS=(cors/connect cors/upsert cors/query cors/delete cors/jobs core/frontend core/backend core/live core/notify ui/render)

##
# Docker Helpers

function docker_cleanup {
  if [[ -d $2 ]]; then
    docker ps -a | grep $1 | grep Exited | awk '{print $1}' | xargs docker rm -f -v 2> /dev/null
  else
    docker ps -a | grep $1 | awk '{print $1}' | xargs docker rm -f -v 2> /dev/null
  fi
  true
}

##
# Fleetctl Helpers

function safe_rm {
  rm $@ -rf 2> /dev/null &
  true
}

function render_template() {
  # eval "echo \"$(cat $1)\""
  filename=$2
  cp $1 $filename

  sed "s#\$app#$app#gi" $filename > $filename.o
  sed "s#\$api#$api#gi" $filename.o > $filename
  sed "s#\$endpoint#$endpoint#gi" $filename > $filename.o
  sed "s#\$secret#$secret#gi" $filename.o > $filename  
  #mv $filename.o $filename
  safe_rm $filename.o
  true
}

function secretbase {
  app=$1
  if [[ -z $(etcdctl get /apps/$app/secret 2> /dev/null) ]]; then
    secret=$(echo $app | md5sum -- | cut -d ' ' -f 1 | base64)
    etcdctl set /apps/$app/secret $secret
  else
    secret=$(etcdctl get /apps/$app/secret)
  fi
}

function load_api {
  api=$1
  endpoint=$(basename $api)
  api=$(dirname $api)
  secret=$(secretbase $app)
  index=$2
  template="$TMPL_DIR/api@.service.tmpl"
  service="$TMPL_DIR/$api-$endpoint@$app-$index.service"
  
  if [[ $endpoint == *jobs* ]] || [[ $endpoint == *notify* ]]; then
    template="$TMPL_DIR/$endpoint@.service.tmpl";
    render_template $template $service
    fleetctl destroy $service
    fleetctl submit $service
    fleetctl load $(basename $service)
    safe_rm $service
  else
    discovery_service="$TMPL_DIR/$api-$endpoint-discovery@$app-$index.service"
    render_template $template $service
    render_template "$TMPL_DIR/api-discovery@.service.tmpl" $discovery_service
    fleetctl destroy $service $discovery_service
    fleetctl submit $service $discovery_service
    fleetctl load $service $discovery_service
    safe_rm $service $discovery_service
  fi
}

function wait_service {
  while [[ $(docker ps | grep $1 | grep $2 | wc -l) -eq 0 ]]; do echo "Waiting docker: $1 $2"; sleep 1; done      
  while [[ -z "$(etcdctl get "/apps/$1/$3" 2> /dev/null)" ]]; do echo "Waiting service: /apps/$1/$3"; sleep 1; done    
  echo "$(etcdctl get /apps/$1/$3)"
  true
}

case "$1" in
  
  fleet:destroy_all)
    fleetctl list-units --no-legend | awk '{print $1}' | xargs fleetctl destroy
    fleetctl list-unit-files --no-legend | awk '{print $1}' | xargs fleetctl destroy
    
    for app in $(etcdctl ls /apps); do
      # docker_cleanup $app true
      # etcdctl rm $app --recursive 2> /dev/null
      $0 apps:destroy $app
    done 
  ;;
  
  apis:load)
    app=$2
    api=$3  
    index=$4
    if [[ -z $app ]] || [[ -z $api ]]; then
      echo "Missing Parameters"
      exit -1
    else
      load_api $api $index
    fi
  ;; 
  
  apis:start)
    app=$2
    api=$3      
    if [[ -z $app ]] || [[ -z $api ]]; then
      echo "Missing Parameters"
      exit -1
    else
      for unit in $(fleetctl list-units | grep $app | grep $api | grep -v 'running\|discovery' | awk '{print $1}'); do
        fleetctl start $unit
      done
    fi
  ;; 
  
  apis:stop)
    app=$2
    api=$3      
    if [[ -z $app ]] || [[ -z $api ]]; then
      echo "Missing Parameters"
      exit -1
    else
      for unit in $(fleetctl list-units | grep $app | grep $api | grep -v 'discovery' | awk '{print $1}'); do
        fleetctl stop $unit
      done
    fi
  ;; 
  
  apis:restart)
    app=$2
    api=$3      
    if [[ -z $app ]] || [[ -z $api ]]; then
      echo "Missing Parameters"
      exit -1
    else
      $0 apis:stop $app $api
      $0 apis:start $app $api
    fi
  ;; 
  
  apps:load)
    app=$2
    
    if [[ -z $app ]]; then
      echo "Missing Parameters"
      exit -1
    else
      
      # submit postgres service
      fleetctl submit $TMPL_DIR/postgresql@.service $TMPL_DIR/postgresql-discovery@.service
      fleetctl load postgresql@$app.service postgresql-discovery@$app.service
    
      for api in ${APIS[@]}
      do
        load_api $api 1
      done
    
    fi
    
  ;; 
  
  apps:start)
    app=$2
    
    if [[ -z $app ]]; then
      echo "Missing Parameters"
      exit -1
    else    
      fleetctl start "postgresql@$app.service"
    
      wait_service $app "postgresql" "addons/postgresql" 
      
      # Ensure postgres config is set
      etcdctl set /apps/$app/addons/postgresql postgres://usr_$app:$(echo $app | md5sum -- | cut -d ' ' -f 1 | base64)@$(docker port $(docker ps | grep postgresql-$app | awk '{print $1}') 5432)/db_$app
      echo "Postgres set to: $(etcdctl get /apps/$app/addons/postgresql)"
      
      $0 apps:run $app rake db:migrate &> /dev/null || true
    
      for unit in $(fleetctl list-units | grep $app | grep -v 'running\|discovery' | awk '{print $1}'); do
        if [[ "$unit" == *notify* ]]; then
          wait_service $app "core-live" "apis/core/live/$app-1"
          fleetctl start $unit          
        else
          fleetctl start $unit
        fi
      done
      
      # notify api always failing on first try :( , so make it running
      for unit in $(fleetctl list-units | grep $app | grep failed | grep -v 'discovery' | awk '{print $1}'); do
        fleetctl stop $unit
        fleetctl start $unit      
      done
    fi
  ;;

  apps:stop)
    app=$2
    if [[ -z $app ]]; then
      echo "Missing Parameters"
      exit -1
    else
      for unit in $(fleetctl list-units | grep $app | grep -v 'discovery' | awk '{print $1}'); do
        fleetctl stop $unit
      done
    fi
  ;;
  
  apps:restart)
    app=$2
    if [[ -z $app ]]; then
      echo "Missing Parameters"
      exit -1
    else
      $0 apps:stop $app
      $0 apps:start $app
    fi
  ;;
  
  apps:scale)
    app=$2
    target=$3
    if [[ -z $app ]] || [[ -z $target ]]; then
      echo "Missing Parameters"
      exit -1
    else
      for api in ${APIS[@]}; do
        
        service="$(dirname $api)-$(basename $api)@$app"
        running=$(echo $(fleetctl list-units | grep $service | grep -v 'discovery' | grep running | wc -l))
        
        if [[ $target -lt $running ]]; then
          
          echo "SCALE DOWN $target $running"    
          while [[ $target -lt $running ]]; do
            unit="$service-$running"
            fleetctl destroy $unit
            fleetctl destroy $(echo $unit | sed 's#@#-discovery@#')
            # fleetctl stop $(echo $unit | sed 's#@#-discovery@#')
            running=$(($running-1))      
          done  
          
        else
          echo "SCALE UP $target $running"    
          
          while [[ $target -gt $running ]]; do
            running=$(($running+1))
      
            if [[ $api == *notify* ]]; then 
              if [[ $running -eq 1 ]]; then
                load_api $api $running
                fleetctl start "$service"
              fi
            else
              load_api $api $running        
              fleetctl start "$service"
            fi
            
            
          done
        fi
      done
    fi
  ;;
  
  apps:run)
    app=$2
    if [[ $(fleetctl list-units | grep $app | wc -l) -eq 0 ]]; then
      echo "Missing Parameters"
      exit -1
    else
      database_url=$(etcdctl get /apps/$app/addons/postgresql)
      shift 2
      docker run --rm -it -e DATABASE_URL=$database_url hackberry/actn-core $@
    fi
  ;;
  
  apps:destroy)
    app=$2
    if [[ -z $app ]]; then
      echo "Missing Parameters"
      exit -1
    else
      fleetctl list-units --no-legend | grep $app | awk '{print $1}' | xargs fleetctl destroy || true
      fleetctl list-unit-files --no-legend | grep $app | awk '{print $1}' | xargs fleetctl destroy || true
      sleep 2
      $(etcdctl rm /apps/$app --recursive 2> /dev/null) || true
      docker_cleanup $app true
    fi
  ;;
  
  logs)
    app=$2
    {
    for service in $(fleetctl list-units | grep $app | grep -v 'discovery' | grep running)
    do
      fleetctl journal -f $service &
    done
    } > /tmp/$app.log
    tail -f /tmp/$app.log
  ;;
  
  haproxy:reset)
    fleetctl destroy haproxy.service 
    fleetctl submit "$FLEET_DIR/static/haproxy.service"
    fleetctl load haproxy.service
    fleetctl start haproxy.service
  ;;

  
esac

# echo "[actnctl] $@ finished"